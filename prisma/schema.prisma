generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role[]
  accounts      Account[]
  appointments  Appointment[]
  client        Client?
  locations     Location[]
  masseuse      Masseuse?
  posts         Post[]
  sessions      Session[]
  sites         Site[]
  subscriptions Subscription[]
  tokens        Token[]

  @@unique([name, id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Masseuse {
  id                String             @id @default(cuid())
  wechatUsername    String             @unique
  masseuseName      String
  masseuseId        String
  masseuseServiceId String
  appointments      Appointment[]
  holidayHours      HolidayHours[]
  LocationMasseuse  LocationMasseuse[]
  user              User               @relation(fields: [masseuseName, masseuseId], references: [name, id])
  servicesOffered   MasseuseService    @relation(fields: [masseuseServiceId], references: [id])
  workingHours      WorkingHours[]
  timeOffRequests   TimeOffRequest[]
  scheduleChanges   ScheduleChange[]

  @@unique([masseuseName, masseuseId])
}

model Client {
  id              String           @id @default(cuid())
  clientName      String
  clientId        String
  appointment     Appointment[]
  user            User             @relation(fields: [clientName, clientId], references: [name, id])
  clientLocations LocationClient[]

  @@unique([clientName, clientId])
}

model LocationClient {
  id         String   @id @default(cuid())
  clientId   String
  locationId String
  client     Client   @relation(fields: [clientId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([clientId, locationId])
}

model MasseuseService {
  id           String          @id @default(cuid())
  type         MassageType[]
  serviceNames String[]
  addons       MassageAddons[]
  duration     Int[]
  Masseuse     Masseuse[]
}

model Massage {
  id          String         @id @default(cuid())
  type        MassageType
  appointment Appointment[]
  addons      MassageAddon[]

  @@unique([id, type])
}

model MassageAddon {
  id        String        @id @default(cuid())
  type      MassageAddons
  massageId String
  massage   Massage       @relation(fields: [massageId], references: [id])

  @@unique([type, massageId])
}

model Appointment {
  id                      String   @id @default(cuid())
  appointmentDate         DateTime
  duration                Int
  masseuseAppointmentName String
  masseuseAppointmentId   String
  clientAppointmentName   String
  clientAppointmentId     String
  locationId              String
  massageId               String
  userId                  String?
  client                  Client   @relation(fields: [clientAppointmentName, clientAppointmentId], references: [clientName, clientId])
  location                Location @relation(fields: [locationId], references: [id])
  massage                 Massage  @relation(fields: [massageId], references: [id])
  masseuse                Masseuse @relation(fields: [masseuseAppointmentName, masseuseAppointmentId], references: [masseuseName, masseuseId])
  User                    User?    @relation(fields: [userId], references: [id])
}

model LocationMasseuse {
  id         String   @id @default(cuid())
  locationId String
  masseuseId String
  location   Location @relation(fields: [locationId], references: [id])
  masseuse   Masseuse @relation(fields: [masseuseId], references: [id])

  @@unique([locationId, masseuseId])
}

model Location {
  id           String             @id @default(cuid())
  name         String
  address      String
  city         String
  state        String
  postalCode   String
  country      String
  latitude     Float?
  longitude    Float?
  phoneNumber  String
  ownerId      String
  Appointment  Appointment[]
  holidayHours HolidayHours[]
  user         User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  clients      LocationClient[]
  masseuses    LocationMasseuse[]
  Site         Site[]
  workingHours WorkingHours[]
  scheduleChanges ScheduleChange[]
}

model WorkingHours {
  id         String    @id @default(cuid())
  dayOfWeek  Int
  openTime   DateTime  @default(dbgenerated("'2024-01-01 09:00:00'::timestamp without time zone"))
  closeTime  DateTime  @default(dbgenerated("'2024-01-01 17:00:00'::timestamp without time zone"))
  locationId String?
  masseuseId String?
  location   Location? @relation(fields: [locationId], references: [id])
  masseuse   Masseuse? @relation(fields: [masseuseId], references: [id])

  @@unique([locationId, dayOfWeek])
  @@unique([masseuseId, dayOfWeek])
}

model TimeOffRequest {
  id          String   @id @default(cuid())
  masseuseId  String
  masseuse    Masseuse @relation(fields: [masseuseId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      TimeOffStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([masseuseId])
  @@index([status])
  @@index([startDate, endDate])
}

model ScheduleChange {
  id          String   @id @default(cuid())
  masseuseId  String
  masseuse    Masseuse @relation(fields: [masseuseId], references: [id], onDelete: Cascade)
  locationId  String
  location    Location @relation(fields: [locationId], references: [id])
  dayOfWeek   Int
  oldStartTime DateTime?
  oldEndTime   DateTime?
  newStartTime DateTime?
  newEndTime   DateTime?
  changeType   ScheduleChangeType
  reason       String?
  approvedBy   String?
  approvedAt   DateTime?
  createdAt    DateTime @default(now())
  status       ScheduleChangeStatus @default(PENDING)

  @@index([masseuseId])
  @@index([locationId])
  @@index([status])
}

enum TimeOffStatus {
  PENDING
  APPROVED
  DENIED
  CANCELLED
}

enum ScheduleChangeType {
  ADD
  MODIFY
  REMOVE
  SWAP
}

enum ScheduleChangeStatus {
  PENDING
  APPROVED
  DENIED
  CANCELLED
}


model HolidayHours {
  id          String    @id @default(cuid())
  holidayDate DateTime
  openTime    DateTime  @default(dbgenerated("'2024-01-01 09:00:00'::timestamp without time zone"))
  closeTime   DateTime  @default(dbgenerated("'2024-01-01 17:00:00'::timestamp without time zone"))
  locationId  String?
  masseuseId  String?
  location    Location? @relation(fields: [locationId], references: [id])
  masseuse    Masseuse? @relation(fields: [masseuseId], references: [id])

  @@unique([locationId, holidayDate])
  @@unique([masseuseId, holidayDate])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id            String   @id @default(cuid())
  title         String?
  description   String?
  content       String?
  slug          String   @default(cuid())
  image         String?
  imageBlurhash String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  siteId        String?
  userId        String?
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([slug, siteId])
  @@index([siteId])
  @@index([userId])
}

model Site {
  id            String   @id @default(cuid())
  name          String?
  description   String?
  logo          String?
  font          String   @default("font-cal")
  layout        Int      @default(1)
  image         String?
  imageBlurhash String?
  subdomain     String?  @unique
  customDomain  String?  @unique
  message404    String?  @default("You've found a page that doesn't exist.")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  locationId    String
  userId        String?
  posts         Post[]
  location      Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                String   @id @default(cuid())
  plan              String
  role              Role     @unique
  stripeId          String   @unique
  billingCycleStart Int
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  owner
  admin
  masseuse
  client
}

enum MassageType {
  body
  foot
  sauna
}

enum MassageAddons {
  cupping
  backwalking
  hotstones
  aromatherapy
  tigerbalm
}
